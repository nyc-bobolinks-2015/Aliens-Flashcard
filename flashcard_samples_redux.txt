Opens a library, or module, within a Ruby Stream.
module

Bumps an iterator, or a while or until block, to the next iteration, unconditionally and without executing whatever may remain of the block.
next

A special "non-object"; it is, in fact, an object (the sole instance of NilClass), but connotes absence and indeterminacy. nil and false are the only two objects in Ruby that have Boolean falsehood (informally, that cause an if condition to fail).
nil

Boolean negation. i.e. not true # false, not 10 # false, not false # true.
not

Boolean or. Differs from || in that or has lower precedence.
or

Causes unconditional re-execution of a code block, with the same parameter bindings as the current execution.
redo

Designates an exception-handling clause that can occur either inside a begin<code>/<code>end block, inside a method definition (which implies begin), or in modifier position (at the end of a statement).
rescue

Inside a rescue clause, causes Ruby to return to the top of the enclosing code (the begin keyword, or top of method or block) and try executing the code again.
retry

Inside a method definition, executes the ensure clause, if present, and then returns control to the context of the method call. Takes an optional argument (defaulting to nil), which serves as the return value of the method. Multiple values in argument position will be returned in an array.
return

The "current object" and the default receiver of messages (method calls) for which no explicit receiver is specified. Which object plays the role of self depends on the context.
self

Called from a method, searches along the method lookup path (the classes and modules available to the current object) for the next method of the same name as the one being executed. Such method, if present, may be defined in the superclass of the object's class, but may also be defined in the superclass's superclass or any class on the upward path, as well as any module mixed in to any of those classes.
super

Optional component of conditional statements (if, unless, when). Never mandatory, but allows for one-line conditionals without semi-colons.
then

The sole instance of the special class TrueClass. true encapsulates Boolean truth; however, <emph>all</emph> objects in Ruby are true in the Boolean sense (informally, they cause an if test to succeed), with the exceptions of false and nil.
true

Undefines a given method, for the class or module in which it's called. If the method is defined higher up in the lookup path (such as by a superclass), it can still be called by instances classes higher up.
undef

The negative equivalent of if. i.e. unless y.score > 10 puts "Sorry; you needed 10 points to win." end.
unless

The inverse of while: executes code until a given condition is true, i.e., while it is not true. The semantics are the same as those of while.
until

Same as case.
when

Takes a condition argument, and executes the code that follows (up to a matching end delimiter) while the condition is true.
while

Called from inside a method body, yields control to the code block (if any) supplied as part of the method call. If no code block has been supplied, calling yield raises an exception.
yield